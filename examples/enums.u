import "io"

enum Event {
  Keyboard(str)
  Click(num, num)
  Close
}

const events arr = [
  Event.Click(123, 321),
  Event.Keyboard("k"),
  Event.Close
]

for mut i num = 0, ~events - 1 {
  match events[i] {
    Event.Keyboard |key| {
      io::println("keyboard event with key:", key)
    }
    Event.Click |x, y| {
      io::println("click event at x:", x, "y:", y)
    }
    Event.Close {
      io::println("close event")
    }
  }
}

io::println(Event.Keyboard("a") enumof Event.Keyboard) # true
io::println(Event.Keyboard("a") == Event.Keyboard("a")) # true
io::println(Event.Keyboard("a") == Event.Keyboard("b")) # false

## Todo
# - [x] Declare enums
# - [x] Enum with arguments
# - [x] Enum pattern matching
# - [ ] Support for generic enums
