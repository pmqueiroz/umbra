{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Experimental Language</p> <p>This language is designed as a learning project and should not be considered a production-ready tool. It\u2019s a sandbox for exploring language design concepts and is subject to frequent changes. Use it for experimentation, have fun, and please don\u2019t take it too seriously!</p>"},{"location":"#download-and-install","title":"Download and Install","text":""},{"location":"#install-from-asdf","title":"Install from asdf","text":"<pre><code>asdf plugin add umbra https://github.com/pmqueiroz/asdf-umbra.git\nasdf install umbra latest\nasdf global umbra latest\n</code></pre>"},{"location":"examples/conditions/","title":"Conditions","text":"<p>In Umbra, conditional logic is handled using the <code>if</code>, <code>else if</code>, and <code>else</code> constructs, which allow branching based on <code>bool</code> expressions. The basic structure begins with <code>if</code>, followed by a condition enclosed in parentheses and the block of code to execute if the condition is <code>true</code>:</p> conditions.md<pre><code>if true {\n  # Code executes if the condition is true\n}\n</code></pre> <p>You can add an <code>else if</code> block to check additional conditions if the first one is <code>false</code>:</p> conditions.md<pre><code>else if false {\n  # Code executes if the first condition is false, but this one is true\n}\n</code></pre> <p>Finally, an optional <code>else</code> block can be added to handle all cases where none of the previous conditions are met:</p> conditions.md<pre><code>else {\n  # Code executes if all previous conditions are false\n}\n</code></pre> <p>This structure allows for clean and readable conditional branching, enabling complex decision-making within the code.</p>"},{"location":"examples/hello-word/","title":"Hello World","text":"<p>This example demonstrates how to print a message to the terminal using the Umbra language.</p>"},{"location":"examples/hello-word/#code","title":"Code","text":"hello-world.u<pre><code>import \"io\"\n\nio::println(\"Hello world\")\n</code></pre>"},{"location":"examples/hello-word/#how-to-run","title":"How to Run","text":"<p>To run the code above, save it in a file with the <code>.u</code> extension, such as <code>hello-world.u</code>. Then, execute the command:</p> <pre><code>umbra hello-world.u\n</code></pre> <p>This command will display <code>Hello world</code> in the terminal, showcasing the basic output functionality in Umbra.</p> <p>Next example: Values</p>"},{"location":"examples/html/","title":"Html","text":"<pre><code>io::println(\n    html::html(\n        html::body(\n            html::frag(\n                html::div(\n                    \"Hello, World!\",\n                    { class: \"flex items-center\" }\n                ),\n                html::div(\n                    \"Click me\",\n                    {\n                        class: \"flex items-center\",\n                        hxPost: \"/click\",\n                    }\n                ),\n            ),\n            {}\n        ),\n        {}\n    )\n)\n</code></pre> <pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;div class=\"flex items-center\"&gt;\n      Hello, World!\n    &lt;/div&gt;\n    &lt;div class=\"flex items-center\" hx-post=\"/click\"&gt;\n      Click me\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/loops/","title":"Loops","text":"<p>In Umbra, for is the only looping construct, offering two distinct forms: the initialized <code>for</code> statement and the conditional for statement.</p>"},{"location":"examples/loops/#initialized","title":"Initialized","text":"<p>The initialized <code>for</code> loop has an initializer, stop condition, and an optional step value, structured as </p> <p>loops.u<pre><code>for mut i num = 0, 10, 2 {\n  io::println(i)\n}\n</code></pre> where <code>i</code> starts at <code>0</code>, runs until <code>10</code>, and increments by <code>2</code> on each iteration, resulting in</p> <pre><code>0\n2\n4\n6\n8\n10\n</code></pre>"},{"location":"examples/loops/#conditional","title":"Conditional","text":"<p>The conditional <code>for</code> loop, on the other hand, is structured with a condition, executing as long as the condition remains true.</p> loops.u<pre><code>for i &lt; 10 {\n\n}\n</code></pre> <p>If no condition is specified, the loop becomes infinite, running until explicitly broken with <code>break</code>.</p> loops.u<pre><code>mut i num = 0\n\nfor {\n  if i &gt; 10 {\n    break\n  }\n\n  i = i + 1\n}\n</code></pre>"},{"location":"examples/loops/#control-loop-flow","title":"Control loop flow","text":"<p>Umbra also includes <code>break</code> and <code>continue</code> statements to control loop flow. <code>break</code> immediately exits the loop, while <code>continue</code> skips to the next iteration, allowing precise control over looping behavior.</p> <pre><code>for mut i num = 0, 100 {\n  if i % 2 == 0 {\n    continue\n  }\n\n  if i &gt; 10 {\n    break\n  }\n\n  io::println(i)\n}\n</code></pre> <p>results in</p> <p><pre><code>1\n3\n5\n7\n9\n</code></pre> Next example: Conditions</p>"},{"location":"examples/values/","title":"Values","text":"<p>Umbra has various value types including strings (<code>str</code>), numbers (<code>num</code>), booleans (<code>bool</code>), etc. Here are a few basic examples.</p> <p>Strings, which can be added together with +.</p> <p>values.u<pre><code>io::println(\"umbra\" + \"lang\")\n</code></pre> Numbers.</p> values.u<pre><code>io::println(\"1+1 =\", 1+1)\nio::println(\"7/3 =\", 7/3)\n</code></pre> <p>Booleans, with boolean operators as you\u2019d expect.</p> values.u<pre><code>io::println(true and false)\nio::println(true or false)\nio::println(!true)\n</code></pre> <pre><code>$ umbra values.u\n# umbralang\n# 1+1 = 2\n# 7/3 = 2.3333333333333335\n# false\n# true\n# false\n</code></pre> <p>Next example: Variables</p>"},{"location":"examples/variables/","title":"Variables","text":"<p>In Umbra, variables must always be explicitly typed, with the option to declare them as either <code>const</code> or <code>mut</code>, providing control over immutability and mutability in code.</p>"},{"location":"examples/variables/#mutable-and-constants","title":"Mutable and constants","text":"types.u<pre><code>const name str = \"Peam\"\nmut age num = 24\nconst fool bool = true\n\nmut person hashmap = {\n  name: name,\n  age: age,\n}\n\nconst people arr = [person]\n</code></pre>"},{"location":"examples/variables/#nullable","title":"Nullable","text":"<p>Additionally, by adding a <code>?</code> after the type, a variable can be made nullable, allowing it to hold either a value of the specified type or <code>null</code>.</p> types.u<pre><code>mut name str? = \"Peam\"\nname = null\n</code></pre> <p>Not initialized</p> <p>Variables not initialized should be set as nullable when declaring types.u<pre><code>mut name str?\n</code></pre></p> <p>Next example: Loops</p>"},{"location":"libs/io/","title":"IO","text":"<pre><code>import \"io\"\n</code></pre>"},{"location":"libs/io/#functions","title":"Functions","text":""},{"location":"libs/io/#printvalues-any","title":"<code>print(values ...any)</code>","text":"<p>Prints the provided values to the standard output without a newline at the end.</p> <ul> <li>Parameters:</li> <li><code>values</code>: A variadic parameter of any type, representing the values to be printed.</li> </ul>"},{"location":"libs/io/#printlnvalues-any","title":"<code>println(values ...any)</code>","text":"<p>Prints the provided values to the standard output with a space between each value and a newline at the end.</p> <ul> <li>Parameters:</li> <li><code>values</code>: A variadic parameter of any type, representing the values to be printed.</li> </ul>"},{"location":"libs/io/#printerrvalues-any","title":"<code>printErr(values ...any)</code>","text":"<p>Prints the provided values to the standard error output without a newline at the end.</p> <ul> <li>Parameters:</li> <li><code>values</code>: A variadic parameter of any type, representing the values to be printed.</li> </ul>"},{"location":"libs/io/#printerrlnvalues-any","title":"<code>printErrLn(values ...any)</code>","text":"<p>Prints the provided values to the standard error output with a space between each value and a newline at the end.</p> <ul> <li>Parameters:</li> <li><code>values</code>: A variadic parameter of any type, representing the values to be printed.</li> </ul>"},{"location":"libs/math/","title":"Math","text":"<p>Perform mathematical operations such as absolute value, square root, trigonometric calculations, and power functions.</p> <pre><code>import \"math\"\n</code></pre>"},{"location":"libs/math/#functions","title":"Functions","text":""},{"location":"libs/math/#absx-num-num","title":"<code>abs(x num) num</code>","text":"<p>Returns the absolute value of a number.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number to get the absolute value of.</li> <li>Returns:</li> <li>(<code>num</code>): The absolute value of the number.</li> </ul>"},{"location":"libs/math/#sqrtx-num-num","title":"<code>sqrt(x num) num</code>","text":"<p>Calculates the square root of a number using the Newton-Raphson method.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number to calculate the square root of.</li> <li>Returns:</li> <li>(<code>num</code>): The square root of the number, or <code>NaN</code> if the number is negative.</li> </ul>"},{"location":"libs/math/#floorx-num-num","title":"<code>floor(x num) num</code>","text":"<p>Rounds a number down to the nearest integer, handling negative numbers correctly.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number to be rounded down.</li> <li>Returns:</li> <li>(<code>num</code>): The largest integer less than or equal to the number.</li> </ul>"},{"location":"libs/math/#ceilx-num-num","title":"<code>ceil(x num) num</code>","text":"<p>Rounds a number up to the nearest integer, handling positive numbers correctly.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number to be rounded up.</li> <li>Returns:</li> <li>(<code>num</code>): The smallest integer greater than or equal to the number.</li> </ul>"},{"location":"libs/math/#powbase-num-exponent-num-num","title":"<code>pow(base num, exponent num) num</code>","text":"<p>Calculates the power of a number.</p> <ul> <li>Parameters:</li> <li><code>base</code> (<code>num</code>): The base number.</li> <li><code>exponent</code> (<code>num</code>): The exponent to raise the base to.</li> <li>Returns:</li> <li>(<code>num</code>): The result of raising the base to the given exponent.</li> </ul>"},{"location":"libs/math/#sinx-num-num","title":"<code>sin(x num) num</code>","text":"<p>Calculates the sine of a number using the Taylor series expansion.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number (in radians) to calculate the sine of.</li> <li>Returns:</li> <li>(<code>num</code>): The sine of the number.</li> </ul>"},{"location":"libs/math/#cosx-num-num","title":"<code>cos(x num) num</code>","text":"<p>Calculates the cosine of a number using the Taylor series expansion.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number (in radians) to calculate the cosine of.</li> <li>Returns:</li> <li>(<code>num</code>): The cosine of the number.</li> </ul>"},{"location":"libs/math/#tanx-num-num","title":"<code>tan(x num) num</code>","text":"<p>Calculates the tangent of a number.</p> <ul> <li>Parameters:</li> <li><code>x</code> (<code>num</code>): The number (in radians) to calculate the tangent of.</li> <li>Returns:</li> <li>(<code>num</code>): The tangent of the number.</li> </ul>"}]}